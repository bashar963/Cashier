buildscript {
    ext {
        compileSdkVersion = 33
        minSdkVersion = 24
        targetSdkVersion = 33

        gprc_version = "1.53.0"
        grpc_kotlin_stub_version = "1.3.0"
        protobuf_java_version = "3.22.2"
        annotations_api_version = "6.0.53"
        protoc_version = "3.21.7"
        androidx_core = "1.9.0"
        compose_version = '1.4.0'
        activity_compose_version = '1.7.0'
        hilt_version = '2.44'
        room_version = "2.5.1"
        coroutines_version = "1.6.4"
        work_manager_version = "2.8.1"
        nav_version = "2.5.3"
        retrofit_version = "2.9.0"
        okhttp_version = "4.10.0"
        libphonenumber_version = "8.13.4"
        coil_compose_version = "2.2.2"
        androidx_lifecycle = "2.6.1"
        compose_material3 = "1.0.1"
        compose_material = "1.4.0"
        accompanist = "0.29.1-alpha"
        junit = "4.13.2"
        androidx_junit_ext = "1.1.5"
        espresso = "3.5.1"
        maps_version = "2.11.0"
        places_version = "0.4.0"
        play_services_maps_version = "18.1.0"
        volley_version = "1.2.1"
        lingver_version = "1.3.0"
        timber = "5.0.1"
        firebase = "31.2.3"
    }
}
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '7.4.2' apply false
    id 'com.android.library' version '7.4.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
    id 'com.google.dagger.hilt.android' version "$hilt_version" apply false
    id "org.jlleitschuh.gradle.ktlint" version "11.2.0"
    id "io.gitlab.arturbosch.detekt" version "1.22.0"
    id 'com.google.gms.google-services' version "4.3.15" apply false
    id 'com.google.firebase.crashlytics' version "2.9.4" apply false
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin' version '2.0.1' apply false
}

static def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    if (propFile.canRead()) {
        System.out.println("Loading property file: " + propFile.absolutePath)
        config.load(new FileInputStream(propFile))
        return config
    } else {
        System.err.println("Couldn't load property file: " + propFile.absolutePath)
        return null
    }
}
